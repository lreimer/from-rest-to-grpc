syntax = "proto3";

option go_package = "github.com/qaware/from-rest-to-grpc/grpc-beer-gateway/proto";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package beer;

service BeerService {
    // Get the list of all beers
    rpc AllBeers (google.protobuf.Empty) returns (GetBeersResponse) {
        option (google.api.http) = {
            get: "/api/beers"
        };      
    }
    // Get a single beer by Asin
    rpc GetBeer (GetBeerRequest) returns (GetBeerResponse) {
        option (google.api.http) = {
            get: "/api/beers/{asin}"
            response_body: "beer"
        };
    }
    // Create a new beer
    rpc CreateBeer (CreateBeerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/beers"
            body: "*"
        };
    }
    // Update an existing beer
    rpc UpdateBeer (UpdateBeerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/beers/{asin}"
            body: "beer"
        };
    }
    // Delete an existing beeer
    rpc DeleteBeer (DeleteBeerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/beers/{asin}"
        };
    }
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "gRPC Beer Gateway";
		version: "1.0";
		contact: {
			name: "Mario-Leander Reimer";
			url: "https://lreimer.github.io";
			email: "mario-leander.reimer@qaware.de";
		};
		license: {
			name: "MIT";
			url: "https://github.com/qaware/from-rest-to-grpc/blob/master/LICENSE";
		};		
	};
	external_docs: {
		url: "https://github.com/qaware/from-rest-to-grpc/grpc-beer-gateway";
		description: "Beer Service gRPC Gateway";
	}
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
};

message Beer {
    string asin = 1;
    string name = 2;
    string brand = 3;
    string country = 4;
    float alcohol = 5;
    enum BeerType{
        IndianPaleAle = 0;
        SessionIpa = 1;
	    Lager = 2;
    }
    BeerType type = 6;
}

message GetBeersResponse {
    repeated Beer beers = 1;
}

message GetBeerRequest {
    string asin = 1;
}

message GetBeerResponse {
    Beer beer = 1;
}

message CreateBeerRequest {
    Beer beer = 1;
}

message UpdateBeerRequest {
    string asin = 1;
    Beer beer = 2;
}

message DeleteBeerRequest {
    string asin = 1;
}