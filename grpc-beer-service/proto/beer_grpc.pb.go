// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeerServiceClient is the client API for BeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeerServiceClient interface {
	// Get the list of all beers
	AllBeers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBeersResponse, error)
	// Get a single beer by Asin
	GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error)
	// Create a new beer
	CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update an existing beer
	UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete an existing beeer
	DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type beerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeerServiceClient(cc grpc.ClientConnInterface) BeerServiceClient {
	return &beerServiceClient{cc}
}

func (c *beerServiceClient) AllBeers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBeersResponse, error) {
	out := new(GetBeersResponse)
	err := c.cc.Invoke(ctx, "/beer.BeerService/AllBeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error) {
	out := new(GetBeerResponse)
	err := c.cc.Invoke(ctx, "/beer.BeerService/GetBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/beer.BeerService/CreateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/beer.BeerService/UpdateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/beer.BeerService/DeleteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeerServiceServer is the server API for BeerService service.
// All implementations must embed UnimplementedBeerServiceServer
// for forward compatibility
type BeerServiceServer interface {
	// Get the list of all beers
	AllBeers(context.Context, *emptypb.Empty) (*GetBeersResponse, error)
	// Get a single beer by Asin
	GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error)
	// Create a new beer
	CreateBeer(context.Context, *CreateBeerRequest) (*emptypb.Empty, error)
	// Update an existing beer
	UpdateBeer(context.Context, *UpdateBeerRequest) (*emptypb.Empty, error)
	// Delete an existing beeer
	DeleteBeer(context.Context, *DeleteBeerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBeerServiceServer()
}

// UnimplementedBeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBeerServiceServer struct {
}

func (UnimplementedBeerServiceServer) AllBeers(context.Context, *emptypb.Empty) (*GetBeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBeers not implemented")
}
func (UnimplementedBeerServiceServer) GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}
func (UnimplementedBeerServiceServer) CreateBeer(context.Context, *CreateBeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (UnimplementedBeerServiceServer) UpdateBeer(context.Context, *UpdateBeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeer not implemented")
}
func (UnimplementedBeerServiceServer) DeleteBeer(context.Context, *DeleteBeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (UnimplementedBeerServiceServer) mustEmbedUnimplementedBeerServiceServer() {}

// UnsafeBeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeerServiceServer will
// result in compilation errors.
type UnsafeBeerServiceServer interface {
	mustEmbedUnimplementedBeerServiceServer()
}

func RegisterBeerServiceServer(s grpc.ServiceRegistrar, srv BeerServiceServer) {
	s.RegisterService(&BeerService_ServiceDesc, srv)
}

func _BeerService_AllBeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).AllBeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerService/AllBeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).AllBeers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerService/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).GetBeer(ctx, req.(*GetBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerService/CreateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).CreateBeer(ctx, req.(*CreateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_UpdateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).UpdateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerService/UpdateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).UpdateBeer(ctx, req.(*UpdateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerService/DeleteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).DeleteBeer(ctx, req.(*DeleteBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeerService_ServiceDesc is the grpc.ServiceDesc for BeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beer.BeerService",
	HandlerType: (*BeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllBeers",
			Handler:    _BeerService_AllBeers_Handler,
		},
		{
			MethodName: "GetBeer",
			Handler:    _BeerService_GetBeer_Handler,
		},
		{
			MethodName: "CreateBeer",
			Handler:    _BeerService_CreateBeer_Handler,
		},
		{
			MethodName: "UpdateBeer",
			Handler:    _BeerService_UpdateBeer_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _BeerService_DeleteBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beer.proto",
}
